{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","categories","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","respuesta","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","setTimeout","console","log","useFetchGifs","GifExpertApp","ReactDOM","render","document","getElementById"],"mappings":"mMAIaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEZC,mBAAS,IAFG,mBAEzCC,EAFyC,KAE7BC,EAF6B,KAoBhD,OAEE,aADA,CACA,QAAMC,SAZa,SAACC,GACpBA,EAAEC,iBAGGJ,EAAWK,OAAOC,OAAS,IAC9BR,GAAe,SAAAS,GAAU,OAAMP,GAAN,mBAAqBO,OAC9CN,EAAc,MAMhB,SAEE,uBACEO,KAAO,OACPC,MAAUT,EACVU,SAtBoB,SAACP,GACzBF,EAAeE,EAAEQ,OAAOF,a,+BCPfG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAIfC,EAJe,iDAIkCC,UAAUH,GAJ5C,8DAMGI,MAAMF,GANT,cAMfG,EANe,gBAQEA,EAAUC,OARZ,uBAQbC,EARa,EAQbA,KAGFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC5B,MAAO,CACLC,GAAOD,EAAIC,GACXC,MAAOF,EAAIE,MACXV,IAAG,UAAIQ,EAAIG,cAAR,aAAI,EAAYC,iBAAiBZ,QAfnB,kBAmBdM,GAnBc,4CAAH,sDCDPO,EAAc,SAAC,GAAuB,EAArBJ,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAEvC,OACE,sBAAKc,UAAU,yCAAf,UACE,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAKA,QCFEO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECAb,SAAEA,GAAe,IAAD,EAEhBd,mBAAS,CACjCqB,KAAM,GACNa,SAAS,IAJ+B,mBAEnCC,EAFmC,KAE5BC,EAF4B,KAkC1C,OAzBAC,qBAAW,WAETxB,EAASC,GACNwB,MAAM,SAAAC,GACLC,YAAY,WAEVC,QAAQC,IAAIH,GAEZH,EAAS,CACPf,KAAMkB,EACNL,SAAS,MAIV,SAEN,CAACpB,IASGqB,EDvB0BQ,CAAc7B,GAAlCa,EAX0B,EAW/BN,KAAaa,EAXkB,EAWlBA,QAGrB,OACE,qCACE,qBAAIJ,UAAU,oCAAd,cAAqDhB,EAArD,OACEoB,GAAW,mBAAGJ,UAAU,mCAAb,yBACb,qBAAKA,UAAU,YAAf,SAEIH,EAAOJ,KAAK,SAAAC,GAAG,OACb,cAAC,EAAD,eAEOA,GADCA,EAAIC,aEvBXmB,EAAe,WAAM,MAII5C,mBAAS,CAAC,cAJd,mBAIzBQ,EAJyB,KAIbT,EAJa,KAYhC,OACE,qCACE,8CAEA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBAQA,6BAEIS,EAAWe,KAAK,SAAAT,GAAQ,OAItB,aAHA,CAGC,EAAD,CAEEA,SAAWA,GADLA,Y,MC/BpB+B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.6b0c25b8.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types'\r\n\r\n\r\nexport const AddCategory = ({ setCategories }) => { // usamos un prop\r\n\r\n  const [inputValue, setInputValue] = useState('');\r\n\r\n  // para cambiar el texto del input\r\n  const handleInputChange = (e) => {\r\n    setInputValue( e.target.value );\r\n  }\r\n\r\n  // para enviar el texto ingresado y evitar que la página se recargue a cada rato\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    // console.log('Submit hecho')\r\n\r\n    if ( inputValue.trim().length > 2 ) {\r\n      setCategories( categories => [ inputValue, ...categories] );\r\n      setInputValue('');\r\n    }\r\n  }\r\n\r\n  return (\r\n    // aqui podemos sacar los '<>' '</>', ya que form agrupa los elementos\r\n    <form onSubmit = { handleSubmit }>\r\n      {/* <h1>{inputValue}</h1> */}\r\n      <input\r\n        type = \"text\"\r\n        value = { inputValue }\r\n        onChange = { handleInputChange }\r\n      />\r\n    </form>\r\n  );\r\n\r\n};\r\n\r\n// indicamos que el valor de setCategories sea necesario\r\nAddCategory.propTypes = {\r\n  setCategories: PropTypes.func.isRequired\r\n}\r\n","// función que devuelve una Promesa, sino devuelve una promesa que devuelve la collecion de las img\r\n\r\n// función para obtener los gifs\r\nexport const getGifs = async( category ) => {\r\n  \r\n  // conseguimos la url del una busqueda de la api con gifs\r\n  // encodeURI().- reemplaza los espacios en la url por 20% u otros carácteres\r\n  const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=9&api_key=zPV8L5HptfEwRQ7n2kNPBkWjvw2NuHMg`;\r\n  // usamos fetch que es como una interfaz que nos ayuda a buscar recursos de internet, en este caso usando la api de los gifs\r\n  const respuesta = await fetch(url);\r\n  // esperamos 'await' a que lo de arriba funcione para dar una respuesta en formato json\r\n  const { data } = await respuesta.json();\r\n\r\n  // una vez obtenido los gifs, con un map nos creamos un nuevo arreglo y le pasamos un callback donde le decimos cuales son los únicos párametros queremos obtenes del gif\r\n  const gifs = data.map( img => {\r\n    return {\r\n      id:    img.id,\r\n      title: img.title,\r\n      url:   img.images?.downsized_medium.url // el signo '?' pregunta si encuentra el gif que se require y si es así obtiene su url.\r\n    }\r\n  });\r\n\r\n  return gifs;\r\n  \r\n};\r\n","import React from 'react'\r\n\r\nexport const GifGridItem = ( {id, title, url} ) => {\r\n  // console.log(img)\r\n  return (\r\n    <div className=\"card animate__animated animate__fadeIn\">\r\n      <img src={url} alt={title} />\r\n      <p>{ title }</p>\r\n    </div>\r\n  )\r\n}\r\n","import React, { useEffect, useState } from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\n// import { getGifs } from '../helpers/getGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({ category }) => { // pasamos un argumento\r\n  \r\n  // const [images, setImages] = useState([]);\r\n\r\n  // con esto le decimos que solamente se ejecute solo getGifs() una sola vez\r\n  // useEffect(() => {\r\n  //   getGifs( category ) // es una promesa\r\n  //     .then( setImages );\r\n  // }, [ category ]); // para que se ejecute una sola vez le pasamos un array o parametros vacios.\r\n                    // Pero en este caso estamos mandando solo que queremos recibir, que son las categorias.\r\n\r\n  const { data:images, loading } = useFetchGifs( category );\r\n  // console.log(loading);\r\n\r\n  return (\r\n    <>\r\n      <h3 className=\"animate__animated animate__fadeIn\"> { category } </h3>\r\n      { loading && <p className=\"animate__animated animate__flash\">Cargando...</p> }\r\n      <div className=\"card-grid\">\r\n        {\r\n          images.map( img => (\r\n            <GifGridItem\r\n              key={ img.id }\r\n              { ...img }\r\n            />\r\n          ))\r\n        }\r\n      </div>\r\n      \r\n    </>\r\n  )\r\n}\r\n","// Los hooks son solamente funciones y son caracterizados por tener 'use' al inicio de sus nombres\r\n\r\nimport { useEffect, useState } from \"react\";\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n\r\n  const [state, setState] = useState({\r\n    data: [],\r\n    loading: true\r\n\r\n  });\r\n\r\n  // esto es para que no nos carge toda la petición de nuevo\r\n  useEffect( () => {\r\n    // usamos el helper\r\n    getGifs( category )\r\n      .then( imgs => {\r\n        setTimeout( () => {\r\n\r\n          console.log(imgs);\r\n\r\n          setState({\r\n            data: imgs,\r\n            loading: false,\r\n\r\n          });\r\n\r\n        }, 10);\r\n      });\r\n  }, [category]);\r\n\r\n  // setTimeout( ()=> {\r\n  //   setState({\r\n  //     data: [1,2,3],\r\n  //     loading: false,\r\n  //   });\r\n  // }, 3000);\r\n\r\n  return state; // { data: [], loading: true }\r\n\r\n};","import React, { useState } from 'react';\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nexport const GifExpertApp = () => {\r\n  // const categories = ['One Punch', 'Samurai X', 'Dragon Ball']; esta es una manera de hacer nuestra categoria, pero no podemos agregam mas por ser constante\r\n\r\n  // creamos un useStage para poder agregar más opciones a nuestro array de categorias\r\n  const [categories, setCategories] = useState(['One Punch']);\r\n  \r\n  // para agregar una categoria\r\n  // const handleAdd = () => {\r\n    // setCategories( ['Naruto', ...categories] ); esta es una manera de agregar categorias al array\r\n    // setCategories( categories => [ ...categories, 'Naruto' ] );\r\n  // }\r\n\r\n  return (\r\n    <>\r\n      <h2>GifExpertApp</h2>\r\n      {/* añadimos el componente para añadir una categoria */}\r\n      <AddCategory setCategories={ setCategories } />\r\n      <hr />\r\n\r\n      {/* botón para agregar más categorias */}\r\n      {/* <button onClick={handleAdd}>Agregar</button> */}\r\n\r\n      {/* mostramos la lista de categorias */}\r\n      {/* usamos map para recorrer el array y cada elemento necesita un key\r\n      ya que react lo usa para identificarlo */}\r\n      <ol>\r\n        {\r\n          categories.map( category => (\r\n            /* los id generalmente son de base de datos */\r\n            /* <li key={ category }> {category} </li> */\r\n\r\n            <GifGrid\r\n              key={ category } // le pasamos su key con su propio nombre.\r\n              category={ category }\r\n            />\r\n          ))\r\n        }\r\n      </ol>\r\n    </>\r\n  )\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}